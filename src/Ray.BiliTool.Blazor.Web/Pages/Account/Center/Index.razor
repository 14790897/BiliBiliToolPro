@namespace Ray.BiliTool.Blazor.Web.Pages.Account.Center
@page "/account/center"
@attribute [Authorize(policy:AuthorizationHelper.RequireAdminPolicy)]

@using AntDesign.TableModels
@using Microsoft.Extensions.Configuration
@using Ray.BiliBiliTool.Infrastructure
@using Ray.BiliTool.Blazor.Web.Auth

<Table TItem="AccountManage" DataSource="@_data" OnRowClick="OnRowClick">
    <PropertyColumn Title="Id" Property="c => c.Id"><a>@context.Id</a></PropertyColumn>
    <PropertyColumn Title="邮箱" Property="c => c.Email"></PropertyColumn>

    <PropertyColumn Title="角色" Property="c => c.RoleType">
        <EnumRadioGroup TEnum="RoleType" @bind-Value="@context.RoleType" OnChange="() => OnRoleChangedAsync(context)"></EnumRadioGroup>
    </PropertyColumn>

    <ActionColumn Title="操作">
        <Space Size=@("middle")>
            <SpaceItem>
                <Popconfirm Title="确定删除？"
                            OnConfirm="()=> OnDeleteClickAsync(context)"
                            OkText="Yes"
                            CancelText="No">
                    <a>Delete</a>
                </Popconfirm>
            </SpaceItem>
        </Space>
    </ActionColumn>
</Table>

@code {
    [Inject]
    protected IDbConfigService DbConfigService { get; set; }
    [Inject]
    protected ModalService ModalService { get; set; }
    [Inject]
    protected IConfiguration Config { get; set; }
    [Inject]
    protected IAccountService AccountService { get; set; }

    private List<AccountManage> _data;

    protected override async Task OnInitializedAsync()
    {
        await GetTableListAsync();
        await base.OnInitializedAsync();
    }

    private async Task GetTableListAsync()
    {
        _data = await AccountService.GetListAsync();
    }


    private void OnRowClick(RowData<AccountManage> row)
    {
        Console.WriteLine($"row {row.Data.Id} was clicked.");
    }

    private async Task OnDeleteClickAsync(AccountManage ck)
    {
        var check =await CheckAsync(ck);
        if(!check)return;
        await AccountService.DeleteAsync(ck.Id);
        await ModalService.SuccessAsync(new ConfirmOptions()
            {
                Title = "删除成功",
                Content = $"Email：{ck.Email}"
            });
        await GetTableListAsync();
    }

    private async Task OnRoleChangedAsync(AccountManage ck)
    {
        var check =await CheckAsync(ck);
        if(!check)return;

        await AccountService.PutSync(ck.Id,ck);
        await ModalService.SuccessAsync(new ConfirmOptions()
            {
                Title = "修改成功",
            });
        await GetTableListAsync();
    }

    private async Task<bool> CheckAsync(AccountManage ck)
    {
        if (ck.Id == "0")
        {
            await ModalService.WarningAsync(new ConfirmOptions()
            {
                Title = "这河狸吗。。。",
            });
            await GetTableListAsync();
            return false;
        }
        return true;
    }
}
