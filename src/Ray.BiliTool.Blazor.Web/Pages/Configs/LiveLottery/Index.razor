@namespace Ray.BiliTool.Blazor.Web.Pages.Configs.LiveLottery
@page "/Configs/LiveLottery"
@attribute [Authorize(Roles = "Admin,Manager")]

@using System.ComponentModel.DataAnnotations;
@using System.Text.Json;
@using System.ComponentModel
@using System.Reflection
@using System.Threading
@using global::Hangfire
@using Hangfire
@using Ray.BiliBiliTool.Application.Contracts
@using Ray.BiliBiliTool.Config;

<Form Model="@_liveLotteryTaskConfigModel"
      OnFinish="OnFinish"
      OnFinishFailed="OnFinishFailed"
      LabelColSpan="8"
      WrapperColSpan="8">
    <FormItem Label="定时运行">
        <Input @bind-Value="@context.Cron" />
    </FormItem>
    <FormItem Label="排除关键字">
        <Input @bind-Value="@context.ExcludeAwardNames"/>
    </FormItem>
    <FormItem Label="包含关键字">
        <Input @bind-Value="@context.IncludeAwardNames"/>
    </FormItem>
    <FormItem Label="开启自动分组">
        <Input @bind-Value="@context.DenyUids"/>
    </FormItem>
    <FormItem Label="屏蔽UPs">
        <Checkbox @bind-Value="context.AutoGroupFollowings">开启</Checkbox>
    </FormItem>
    <FormItem WrapperColOffset="8" WrapperColSpan="16">
        <Button Type="@ButtonType.Primary" HtmlType="submit">
            Submit
        </Button>
    </FormItem>
</Form>
@code
{
    [Inject]
    protected IDbConfigService DbConfigService { get; set; }
    [Inject]
    protected ModalService ModalService { get; set; }

    private LiveLotteryTaskConfigModel _liveLotteryTaskConfigModel;
    private const string ConfigPrefix = "LiveLotteryTaskConfig:";

    protected override async Task OnInitializedAsync()
    {
        var keyList = new List<string>()
        {
            nameof(LiveLotteryTaskConfigModel.Cron),
            nameof(LiveLotteryTaskConfigModel.ExcludeAwardNames),
            nameof(LiveLotteryTaskConfigModel.IncludeAwardNames),
            nameof(LiveLotteryTaskConfigModel.AutoGroupFollowings),
            nameof(LiveLotteryTaskConfigModel.DenyUids),
        };
        keyList = keyList.Select(x => ConfigPrefix + x).ToList();
        var configs = await DbConfigService.GetConfigsByConfigurationAsync(keyList);

        _liveLotteryTaskConfigModel = new LiveLotteryTaskConfigModel
            {
                Cron = configs[ConfigPrefix + nameof(LiveLotteryTaskConfigModel.Cron)] ?? "",
                ExcludeAwardNames = configs[ConfigPrefix + nameof(LiveLotteryTaskConfigModel.ExcludeAwardNames)] ?? "",
                IncludeAwardNames = configs[ConfigPrefix + nameof(LiveLotteryTaskConfigModel.IncludeAwardNames)] ?? "",
                AutoGroupFollowings = bool.Parse(configs[ConfigPrefix + nameof(LiveLotteryTaskConfigModel.AutoGroupFollowings)]),
                DenyUids = configs[ConfigPrefix + nameof(LiveLotteryTaskConfigModel.DenyUids)] ?? ""
            };

        await base.OnInitializedAsync();
    }

    private async Task OnFinish(EditContext editContext)
    {
        var dic = new Dictionary<string, string>()
        {
            {nameof(LiveLotteryTaskConfigModel.Cron), _liveLotteryTaskConfigModel.Cron},
            {nameof(LiveLotteryTaskConfigModel.ExcludeAwardNames), _liveLotteryTaskConfigModel.ExcludeAwardNames},
            {nameof(LiveLotteryTaskConfigModel.IncludeAwardNames), _liveLotteryTaskConfigModel.IncludeAwardNames},
            {nameof(LiveLotteryTaskConfigModel.AutoGroupFollowings), _liveLotteryTaskConfigModel.AutoGroupFollowings.ToString()},
            {nameof(LiveLotteryTaskConfigModel.DenyUids), _liveLotteryTaskConfigModel.DenyUids}
        };
        dic = dic.ToDictionary(kv => ConfigPrefix + kv.Key, kv => kv.Value);
        await DbConfigService.AddOrUpdateConfigsAsync(dic);

        string code = typeof(ILiveLotteryTaskAppService).GetCustomAttribute<DescriptionAttribute>()?.Description;
        RecurringJob.AddOrUpdate<ILiveLotteryTaskAppService>(code,
            x => x.DoTaskAsync(new CancellationToken()),
            () => _liveLotteryTaskConfigModel.Cron);

        ModalService.Success(new ConfirmOptions()
            {
                Content = "保存成功！"
            });
    }

    private void OnFinishFailed(EditContext editContext)
    {
        Console.WriteLine($"Failed:{JsonSerializer.Serialize(_liveLotteryTaskConfigModel)}");

        ModalService.Error(new ConfirmOptions()
            {
                Title = "保存失败",
                Content = editContext.ToJsonStr()
            });
    }
}
